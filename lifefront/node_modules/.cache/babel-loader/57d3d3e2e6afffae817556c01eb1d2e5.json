{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8080';\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser';\n\nclass AuthenticationService {\n  executeBasicAuthenticationService(username, password) {\n    return axios.get(`${API_URL}/basicauth`, {\n      headers: {\n        authorization: this.createBasicAuthToken(username, password)\n      }\n    });\n  }\n\n  executeJwtAuthenticationService(username, password) {\n    console.log(typeof username);\n    return axios({\n      method: 'post',\n      url: `${API_URL}/login`,\n      data: {\n        username: username,\n        password: password\n      }\n    });\n  }\n\n  registerSuccessfulLoginForJwt(username, token) {\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    this.setupAxiosInterceptors(this.createJWTToken(token));\n  }\n\n  createJWTToken(token) {\n    return 'Bearer ' + token;\n  }\n\n  logout() {\n    sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return '';\n    return user;\n  }\n\n  setupAxiosInterceptors(token) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = token;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["C:/Users/kusia/Desktop/lifefront/src/service/AuthenticationService.js"],"names":["axios","API_URL","USER_NAME_SESSION_ATTRIBUTE_NAME","AuthenticationService","executeBasicAuthenticationService","username","password","get","headers","authorization","createBasicAuthToken","executeJwtAuthenticationService","console","log","method","url","data","registerSuccessfulLoginForJwt","token","sessionStorage","setItem","setupAxiosInterceptors","createJWTToken","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserName","interceptors","request","use","config"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,OAAO,GAAG,uBAAhB;AAEA,OAAO,MAAMC,gCAAgC,GAAG,mBAAzC;;AAEP,MAAMC,qBAAN,CAA4B;AAExBC,EAAAA,iCAAiC,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAClD,WAAON,KAAK,CAACO,GAAN,CAAW,GAAEN,OAAQ,YAArB,EACH;AAAEO,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,KAAKC,oBAAL,CAA0BL,QAA1B,EAAoCC,QAApC;AAAjB;AAAX,KADG,CAAP;AAEH;;AAEDK,EAAAA,+BAA+B,CAACN,QAAD,EAAWC,QAAX,EAAqB;AAChDM,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAOR,QAAnB;AACA,WAAOL,KAAK,CAAC;AACTc,MAAAA,MAAM,EAAC,MADE;AAETC,MAAAA,GAAG,EAAG,GAAEd,OAAQ,QAFP;AAGTe,MAAAA,IAAI,EAAC;AACDX,QAAAA,QAAQ,EAAEA,QADT;AAEDC,QAAAA,QAAQ,EAAEA;AAFT;AAHI,KAAD,CAAZ;AAQH;;AACDW,EAAAA,6BAA6B,CAACZ,QAAD,EAAWa,KAAX,EAAkB;AAC3CC,IAAAA,cAAc,CAACC,OAAf,CAAuBlB,gCAAvB,EAAyDG,QAAzD;AACA,SAAKgB,sBAAL,CAA4B,KAAKC,cAAL,CAAoBJ,KAApB,CAA5B;AACH;;AAEDI,EAAAA,cAAc,CAACJ,KAAD,EAAQ;AAClB,WAAO,YAAYA,KAAnB;AACH;;AAGDK,EAAAA,MAAM,GAAG;AACLJ,IAAAA,cAAc,CAACK,UAAf,CAA0BtB,gCAA1B;AACH;;AAEDuB,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGP,cAAc,CAACQ,OAAf,CAAuBzB,gCAAvB,CAAX;AACA,QAAIwB,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,WAAO,IAAP;AACH;;AAEDE,EAAAA,mBAAmB,GAAG;AAClB,QAAIF,IAAI,GAAGP,cAAc,CAACQ,OAAf,CAAuBzB,gCAAvB,CAAX;AACA,QAAIwB,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,WAAOA,IAAP;AACH;;AAEDL,EAAAA,sBAAsB,CAACH,KAAD,EAAQ;AAC1BlB,IAAAA,KAAK,CAAC6B,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAI,KAAKP,cAAL,EAAJ,EAA2B;AACvBO,QAAAA,MAAM,CAACxB,OAAP,CAAeC,aAAf,GAA+BS,KAA/B;AACH;;AACD,aAAOc,MAAP;AACH,KANL;AAQH;;AArDuB;;AAwD5B,eAAe,IAAI7B,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\r\n\r\nconst API_URL = 'http://localhost:8080'\r\n\r\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\r\n\r\nclass AuthenticationService {\r\n\r\n    executeBasicAuthenticationService(username, password) {\r\n        return axios.get(`${API_URL}/basicauth`,\r\n            { headers: { authorization: this.createBasicAuthToken(username, password) } })\r\n    }\r\n\r\n    executeJwtAuthenticationService(username, password) {\r\n        console.log(typeof username);\r\n        return axios({\r\n            method:'post',\r\n            url: `${API_URL}/login`,\r\n            data:{\r\n                username: username,\r\n                password: password\r\n            }\r\n        })\r\n    }\r\n    registerSuccessfulLoginForJwt(username, token) {\r\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\r\n        this.setupAxiosInterceptors(this.createJWTToken(token))\r\n    }\r\n\r\n    createJWTToken(token) {\r\n        return 'Bearer ' + token\r\n    }\r\n\r\n\r\n    logout() {\r\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\r\n    }\r\n\r\n    isUserLoggedIn() {\r\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\r\n        if (user === null) return false\r\n        return true\r\n    }\r\n\r\n    getLoggedInUserName() {\r\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\r\n        if (user === null) return ''\r\n        return user\r\n    }\r\n\r\n    setupAxiosInterceptors(token) {\r\n        axios.interceptors.request.use(\r\n            (config) => {\r\n                if (this.isUserLoggedIn()) {\r\n                    config.headers.authorization = token\r\n                }\r\n                return config\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport default new AuthenticationService()\r\n"]},"metadata":{},"sourceType":"module"}