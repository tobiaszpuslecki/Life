{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8080';\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser';\n\nclass AuthenticationService {\n  executeJwtAuthenticationService(username, password) {\n    console.log(typeof username);\n    return axios({\n      method: 'post',\n      url: `${API_URL}/login`,\n      data: {\n        username: username,\n        password: password\n      }\n    });\n  } // setupAxiosInterceptors(token) {\n  //     axios.interceptors.request.use(\n  //         (config) => {\n  //             if (this.isUserLoggedIn()) {\n  //                 config.headers.authorization = token\n  //             }\n  //             return config\n  //         }\n  //     )\n  // }\n\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["C:/Users/kusia/Desktop/lifefront/src/service/AuthenticationService.js"],"names":["axios","API_URL","USER_NAME_SESSION_ATTRIBUTE_NAME","AuthenticationService","executeJwtAuthenticationService","username","password","console","log","method","url","data"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,OAAO,GAAG,uBAAhB;AAEA,OAAO,MAAMC,gCAAgC,GAAG,mBAAzC;;AAEP,MAAMC,qBAAN,CAA4B;AACxBC,EAAAA,+BAA+B,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAChDC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAOH,QAAnB;AACA,WAAOL,KAAK,CAAC;AACTS,MAAAA,MAAM,EAAC,MADE;AAETC,MAAAA,GAAG,EAAG,GAAET,OAAQ,QAFP;AAGTU,MAAAA,IAAI,EAAC;AACDN,QAAAA,QAAQ,EAAEA,QADT;AAEDC,QAAAA,QAAQ,EAAEA;AAFT;AAHI,KAAD,CAAZ;AAQH,GAXuB,CAYxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AArBwB;;AAwB5B,eAAe,IAAIH,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\r\n\r\nconst API_URL = 'http://localhost:8080'\r\n\r\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\r\n\r\nclass AuthenticationService {\r\n    executeJwtAuthenticationService(username, password) {\r\n        console.log(typeof username);\r\n        return axios({\r\n            method:'post',\r\n            url: `${API_URL}/login`,\r\n            data:{\r\n                username: username,\r\n                password: password\r\n            }\r\n        })\r\n    }\r\n    // setupAxiosInterceptors(token) {\r\n    //     axios.interceptors.request.use(\r\n    //         (config) => {\r\n    //             if (this.isUserLoggedIn()) {\r\n    //                 config.headers.authorization = token\r\n    //             }\r\n    //             return config\r\n    //         }\r\n    //     )\r\n    // }\r\n}\r\n\r\nexport default new AuthenticationService()\r\n"]},"metadata":{},"sourceType":"module"}