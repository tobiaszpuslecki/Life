{"ast":null,"code":"import axios from 'axios';\nimport { withGlobalState } from 'react-globally';\nconst API_URL = 'http://localhost:8080';\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser';\nexport const USER_JWT_TOKEN = 'JWToken';\n\nclass AuthenticationService {\n  executeJwtAuthenticationService(username, password) {\n    return axios({\n      method: 'post',\n      url: `${API_URL}/login`,\n      data: {\n        username: username,\n        password: password\n      }\n    });\n  }\n\n  registerSuccessfulLoginForJwt(username, token) {\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    sessionStorage.setItem(USER_JWT_TOKEN, token);\n    this.setupAxiosInterceptors();\n    this.props.setGlobalState(() => ({\n      logged: true\n    }));\n  }\n\n  createJWTToken(token) {\n    return token;\n  }\n\n  logout() {\n    sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    sessionStorage.removeItem(USER_JWT_TOKEN);\n    this.props.setGlobalState(prevGlobalState => ({\n      logged: false\n    }));\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return '';\n    return user;\n  }\n\n  setupAxiosInterceptors() {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = sessionStorage.getItem(USER_JWT_TOKEN);\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default AuthenticationService();","map":{"version":3,"sources":["C:/Users/kusia/Desktop/Java/Life/lifefront/src/service/AuthenticationService.js"],"names":["axios","withGlobalState","API_URL","USER_NAME_SESSION_ATTRIBUTE_NAME","USER_JWT_TOKEN","AuthenticationService","executeJwtAuthenticationService","username","password","method","url","data","registerSuccessfulLoginForJwt","token","sessionStorage","setItem","setupAxiosInterceptors","props","setGlobalState","logged","createJWTToken","logout","removeItem","prevGlobalState","isUserLoggedIn","user","getItem","getLoggedInUserName","interceptors","request","use","config","headers","authorization"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,eAAR,QAA8B,gBAA9B;AACA,MAAMC,OAAO,GAAG,uBAAhB;AAEA,OAAO,MAAMC,gCAAgC,GAAG,mBAAzC;AACP,OAAO,MAAMC,cAAc,GAAG,SAAvB;;AAEP,MAAMC,qBAAN,CAA4B;AACxBC,EAAAA,+BAA+B,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAChD,WAAOR,KAAK,CAAC;AACTS,MAAAA,MAAM,EAAC,MADE;AAETC,MAAAA,GAAG,EAAG,GAAER,OAAQ,QAFP;AAGTS,MAAAA,IAAI,EAAC;AACDJ,QAAAA,QAAQ,EAAEA,QADT;AAEDC,QAAAA,QAAQ,EAAEA;AAFT;AAHI,KAAD,CAAZ;AAQH;;AACDI,EAAAA,6BAA6B,CAACL,QAAD,EAAWM,KAAX,EAAkB;AAC3CC,IAAAA,cAAc,CAACC,OAAf,CAAuBZ,gCAAvB,EAAyDI,QAAzD;AACAO,IAAAA,cAAc,CAACC,OAAf,CAAuBX,cAAvB,EAAuCS,KAAvC;AACA,SAAKG,sBAAL;AACA,SAAKC,KAAL,CAAWC,cAAX,CAA0B,OAAM;AAC5BC,MAAAA,MAAM,EAAC;AADqB,KAAN,CAA1B;AAGH;;AAEDC,EAAAA,cAAc,CAACP,KAAD,EAAQ;AAClB,WAAOA,KAAP;AACH;;AAGDQ,EAAAA,MAAM,GAAG;AACLP,IAAAA,cAAc,CAACQ,UAAf,CAA0BnB,gCAA1B;AACAW,IAAAA,cAAc,CAACQ,UAAf,CAA0BlB,cAA1B;AACA,SAAKa,KAAL,CAAWC,cAAX,CAA0BK,eAAe,KAAK;AAC1CJ,MAAAA,MAAM,EAAE;AADkC,KAAL,CAAzC;AAIH;;AAEDK,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGX,cAAc,CAACY,OAAf,CAAuBvB,gCAAvB,CAAX;AACA,QAAIsB,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,WAAO,IAAP;AACH;;AAEDE,EAAAA,mBAAmB,GAAG;AAClB,QAAIF,IAAI,GAAGX,cAAc,CAACY,OAAf,CAAuBvB,gCAAvB,CAAX;AACA,QAAIsB,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,WAAOA,IAAP;AACH;;AAEDT,EAAAA,sBAAsB,GAAG;AACrBhB,IAAAA,KAAK,CAAC4B,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAI,KAAKP,cAAL,EAAJ,EAA2B;AACvBO,QAAAA,MAAM,CAACC,OAAP,CAAeC,aAAf,GAA+BnB,cAAc,CAACY,OAAf,CAAuBtB,cAAvB,CAA/B;AACH;;AACD,aAAO2B,MAAP;AACH,KANL;AAQH;;AAvDuB;;AA0D5B,eAAe1B,qBAAqB,EAApC","sourcesContent":["import axios from 'axios'\r\nimport {withGlobalState} from 'react-globally'\r\nconst API_URL = 'http://localhost:8080'\r\n\r\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\r\nexport const USER_JWT_TOKEN = 'JWToken'\r\n\r\nclass AuthenticationService {\r\n    executeJwtAuthenticationService(username, password) {\r\n        return axios({\r\n            method:'post',\r\n            url: `${API_URL}/login`,\r\n            data:{\r\n                username: username,\r\n                password: password\r\n            }\r\n        })\r\n    }\r\n    registerSuccessfulLoginForJwt(username, token) {\r\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\r\n        sessionStorage.setItem(USER_JWT_TOKEN, token)\r\n        this.setupAxiosInterceptors()\r\n        this.props.setGlobalState(() =>({\r\n            logged:true\r\n        }))\r\n    }\r\n\r\n    createJWTToken(token) {\r\n        return token\r\n    }\r\n\r\n\r\n    logout() {\r\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\r\n        sessionStorage.removeItem(USER_JWT_TOKEN);\r\n        this.props.setGlobalState(prevGlobalState => ({\r\n            logged: false\r\n        }))\r\n        \r\n    }\r\n\r\n    isUserLoggedIn() {\r\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\r\n        if (user === null) return false\r\n        return true\r\n    }\r\n\r\n    getLoggedInUserName() {\r\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\r\n        if (user === null) return ''\r\n        return user\r\n    }\r\n\r\n    setupAxiosInterceptors() {\r\n        axios.interceptors.request.use(\r\n            (config) => {\r\n                if (this.isUserLoggedIn()) {\r\n                    config.headers.authorization = sessionStorage.getItem(USER_JWT_TOKEN)\r\n                }\r\n                return config\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport default AuthenticationService()\r\n"]},"metadata":{},"sourceType":"module"}